{"version":3,"file":"index.esm.js","sources":["../src/utils/helpers.ts","../src/utils/adToBs.ts","../src/constant/engMonths.ts","../src/utils/bsToAd.ts"],"sourcesContent":["import data from '../data/calendar.json';\r\n\r\nexport const { yearStart, monthLengths, monthNames } = data as {\r\n    yearStart: Record<string, string>;\r\n    monthLengths: Record<string, number[]>;\r\n    monthNames: string[];\r\n};\r\n\r\nexport interface CalendarData {\r\n    yearStart: Record<string, string>;\r\n    monthLengths: Record<string, number[]>;\r\n    monthNames: string[];\r\n}\r\n\r\nexport const weekdayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'] as const;\r\nexport type WeekdayName = typeof weekdayNames[number];\r\n\r\nexport const nepaliWeekdayNames = ['Aaitabar', 'Sombar', 'Mangalbar', 'Budhabar', 'Bihibar', 'Shukrabar', 'Shanibar'] as const;\r\nexport type NepaliWeekdayName = typeof nepaliWeekdayNames[number];\r\n\r\nexport interface BSDate {\r\n    year: number;\r\n    month: number;\r\n    day: number;\r\n    formatted: string;\r\n    readable: string;\r\n    weekdayIndex: number;\r\n    weekdayName: WeekdayName;\r\n    nepaliWeekdayName: NepaliWeekdayName;\r\n}\r\n\r\nexport interface ADDate {\r\n    year: number;\r\n    month: number;\r\n    day: number;\r\n    monthName: string;\r\n    formatted: string;\r\n    readable: string;\r\n    weekdayIndex: number;\r\n    weekdayName: WeekdayName;\r\n    nepaliWeekdayName: NepaliWeekdayName;\r\n}\r\n\r\nexport function parseDate(str: string): Date {\r\n    const [year, month, day] = str.split('-').map(Number);\r\n    return new Date(Date.UTC(year, month - 1, day));\r\n}\r\n\r\nexport function addDays(date: Date, days: number): Date {\r\n    const result = new Date(date);\r\n    result.setUTCDate(result.getUTCDate() + days);\r\n    return result;\r\n}\r\n\r\nexport function localizeDate(date: Date): string {\r\n    const options: Intl.DateTimeFormatOptions = {\r\n        timeZone: 'Asia/Kathmandu',\r\n        year: 'numeric',\r\n        month: '2-digit',\r\n        day: '2-digit'\r\n    };\r\n    const localStr = date.toLocaleDateString('en-GB', options);\r\n    return localStr.split('/').reverse().join('-');\r\n}\r\n\r\nexport function getBSYear(adDate: Date): string {\r\n    const localDate = localizeDate(adDate);\r\n    let prevStart: string | null = null;\r\n    const sortedYears = Object.keys(yearStart).sort((a, b) => parseInt(a) - parseInt(b));\r\n    for (let i = 1; i < sortedYears.length; i++) {\r\n        const currentStart = yearStart[sortedYears[i]];\r\n        if (prevStart && localDate >= prevStart && localDate < currentStart) {\r\n            return sortedYears[i - 1];\r\n        }\r\n        prevStart = currentStart;\r\n    }\r\n    if (prevStart && localDate >= prevStart) return sortedYears[sortedYears.length - 1];\r\n    throw new Error('Date outside supported range (2070-2099 BS)');\r\n}\r\n\r\nexport function getDaysPassed(bsYear: string, adDate: Date): number {\r\n    const localDate = localizeDate(adDate);\r\n    const givenDate = parseDate(localDate);\r\n    const startDate = parseDate(yearStart[bsYear]);\r\n    const diffTime = givenDate.getTime() - startDate.getTime();\r\n    return Math.floor(diffTime / (1000 * 60 * 60 * 24)) + 1;\r\n}\r\n\r\nexport function getBSMonthAndDay(bsYear: string, daysPassed: number): { month: number; day: number } {\r\n    let remaining = daysPassed;\r\n    const lengths = monthLengths[bsYear];\r\n    for (let i = 0; i < 12; i++) {\r\n        if (remaining <= lengths[i]) {\r\n            return { month: i + 1, day: remaining };\r\n        }\r\n        remaining -= lengths[i];\r\n    }\r\n    throw new Error('Invalid days calculation');\r\n}\r\n\r\nexport function getWeekdayFromAD(adInput: string | Date): {\r\n    weekdayIndex: number;\r\n    weekdayName: WeekdayName;\r\n    nepaliWeekdayName: NepaliWeekdayName;\r\n} {\r\n    const adDate = typeof adInput === 'string' ? parseDate(adInput) : adInput;\r\n    const weekdayIndex = adDate.getUTCDay();\r\n    return {\r\n        weekdayIndex,\r\n        weekdayName: weekdayNames[weekdayIndex],\r\n        nepaliWeekdayName: nepaliWeekdayNames[weekdayIndex]\r\n    };\r\n}","import { getBSYear, getDaysPassed, getBSMonthAndDay, monthNames, getWeekdayFromAD, type BSDate } from './helpers';\r\n\r\nexport function adToBs(adInput: string | Date): BSDate {\r\n    const adDate: Date = typeof adInput === 'string' ? new Date(adInput) : adInput;\r\n    if (isNaN(adDate.getTime())) throw new Error('Invalid AD date');\r\n\r\n\r\n    const bsYearStr = getBSYear(adDate);\r\n    const bsYear = parseInt(bsYearStr);\r\n    const daysPassed = getDaysPassed(bsYearStr, adDate);\r\n    const { month, day } = getBSMonthAndDay(bsYearStr, daysPassed);\r\n    const { weekdayIndex, weekdayName, nepaliWeekdayName } = getWeekdayFromAD(adDate);\r\n\r\n    return {\r\n        year: bsYear,\r\n        month,\r\n        day,\r\n        formatted: `${bsYearStr}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`,\r\n        readable: `${monthNames[month - 1]} ${day}, ${bsYearStr}`,\r\n        weekdayIndex,\r\n        weekdayName,\r\n        nepaliWeekdayName\r\n    };\r\n}","export const engMonthNames = [\r\n    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n];","import { engMonthNames } from '../constant';\r\nimport { parseDate, addDays, yearStart, monthLengths, getWeekdayFromAD, type ADDate } from './helpers';\r\n\r\nexport function bsToAd(bsInput: string | { year: number; month: number; day: number }): ADDate {\r\n    let year: number, month: number, day: number;\r\n\r\n    if (typeof bsInput === 'string') {\r\n        const parts = bsInput.split(/[-/]/).map(Number);\r\n        if (parts.length !== 3 || parts.some(isNaN)) throw new Error(`Invalid BS date format: ${bsInput}`);\r\n        [year, month, day] = parts;\r\n    } else {\r\n        ({ year, month, day } = bsInput);\r\n    }\r\n\r\n    const key = year.toString();\r\n    const start = yearStart[key];\r\n    if (!start) throw new Error(`Unsupported BS year: ${year}`);\r\n\r\n    const lengths = monthLengths[key];\r\n    if (month < 1 || month > 12 || day < 1 || day > lengths[month - 1]) {\r\n        throw new Error(`Invalid BS date: ${year}-${month}-${day}`);\r\n    }\r\n\r\n    const daysPassed = lengths.slice(0, month - 1).reduce((sum, n) => sum + n, 0) + (day - 1);\r\n    const adDate = addDays(parseDate(start), daysPassed);\r\n    const { weekdayIndex, weekdayName, nepaliWeekdayName } = getWeekdayFromAD(adDate);\r\n\r\n    return {\r\n        year: adDate.getUTCFullYear(),\r\n        month: adDate.getUTCMonth() + 1,\r\n        monthName: engMonthNames[adDate.getUTCMonth()],\r\n        day: adDate.getUTCDate(),\r\n        formatted: `${adDate.getUTCFullYear()}-${(adDate.getUTCMonth() + 1).toString().padStart(2, '0')}-${adDate.getUTCDate().toString().padStart(2, '0')}`,\r\n        readable: `${engMonthNames[adDate.getUTCMonth()]} ${adDate.getUTCDate()}, ${adDate.getUTCFullYear()}`,\r\n        weekdayIndex,\r\n        weekdayName,\r\n        nepaliWeekdayName\r\n    };\r\n}"],"names":[],"mappings":"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"}